<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>syzkaller配置小结</title>
    <link href="/posts/60fc7e01/"/>
    <url>/posts/60fc7e01/</url>
    
    <content type="html"><![CDATA[<p>这部分配置基本参照<a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md">syzkaller官方文档</a></p><h3 id="安装前准备"><a class="markdownIt-Anchor" href="#安装前准备"></a> 安装前准备</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">sudo apt update<br>sudo apt install make gcc flex bison libncurses-dev libelf-dev libssl-dev<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>安装libncurses-dev等时遇到如下问题:</strong></p><p>libncurses5-dev : 依赖: libtinfo5 (= 5.9+20140118-1ubuntu1) 但是 6.1-1ubuntu…</p><p>解决：</p><p>逐个安装相应版本的依赖，缺什么装什么</p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030469.png" alt="image-20211125211645437"></p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030470.png" alt="image-20211125211316133"></p></blockquote><p>最后成功全部装完</p><h3 id="下载内核"><a class="markdownIt-Anchor" href="#下载内核"></a> 下载内核</h3><ul><li><p>clone内核源码</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">git clone --branch v5<span class="hljs-number">.14</span> git:<span class="hljs-comment">//git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git $KERNEL</span><br></code></pre></div></td></tr></table></figure><p>但是因为这样太慢了，所以我最后采取了在网站上直接下载linux内核5.14版本的压缩包，然后解压至目标路径</p><p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-5.14.tar.gz">v5.14压缩包</a></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">tar -zxvf linux-5.14.tar.gz -C ~/syz <br></code></pre></div></td></tr></table></figure></li><li><p>生成默认配置</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">cd $KERNEL<br>make defconfig<br>make kvm_guest.config<br></code></pre></div></td></tr></table></figure></li><li><p>启动所需的配置选项</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">sudo vim .config<br></code></pre></div></td></tr></table></figure><p>手动编辑.config文件，加入下面的变量</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># Coverage collection.</span><br><span class="hljs-attr">CONFIG_KCOV</span>=y<br><br><span class="hljs-comment"># Debug info for symbolization.</span><br><span class="hljs-attr">CONFIG_DEBUG_INFO</span>=y<br><br><span class="hljs-comment"># Memory bug detector</span><br><span class="hljs-attr">CONFIG_KASAN</span>=y<br><span class="hljs-attr">CONFIG_KASAN_INLINE</span>=y<br><br><span class="hljs-comment"># Required for Debian Stretch</span><br><span class="hljs-attr">CONFIG_CONFIGFS_FS</span>=y<br><span class="hljs-attr">CONFIG_SECURITYFS</span>=y<br></code></pre></div></td></tr></table></figure><p>重新生成配置</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">make olddefconfig<br></code></pre></div></td></tr></table></figure></li><li><p>构建内核</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">make -j`nproc`<br></code></pre></div></td></tr></table></figure><p>之后我们可以内核文件夹下看到vmlinux(内核二进制文件)和bzImage(内核镜像)</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">ls $KERNEL/vmlinux<br># sample output - $KERNEL/vmlinux<br>ls $KERNEL/arch/x86/boot/bzImage<br># sample output - $KERNEL/arch/x86/boot/bzImage<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="构建image"><a class="markdownIt-Anchor" href="#构建image"></a> 构建image</h3><ul><li><p>安装debotstrap</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">sudo apt install debootstrap<br></code></pre></div></td></tr></table></figure></li><li><p>生成Debian Stretch Linux镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">mkdir $IMAGE<br>cd $IMAGE/<br>wget https://raw.githubusercontent.com/google/syzkaller/master/tools/create-image.sh -O create-image.sh<br>chmod +x create-image.sh<br>./create-image.sh<br></code></pre></div></td></tr></table></figure></li><li><p>安装镜像的额外工具</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">./create-image.sh --feature full<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="构建qemu"><a class="markdownIt-Anchor" href="#构建qemu"></a> 构建qemu</h3><ul><li><p>首先安装qemu</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">sudo apt install qemu-system-x86<br></code></pre></div></td></tr></table></figure></li><li><p>启动qemu虚拟机</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">qemu-system-x86_64 \                            <br>        -m 2G \<br>        -smp 2 \<br>        -kernel /home/zino/syz/linux-5.14/arch/x86/boot/bzImage \<br>        -append &quot;console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0&quot; \ <br>        -drive file=/home/zino/syz/image/stretch.img,format=raw \<br>        -net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22 \<br>        -net nic,model=e1000 \<br>        -enable-kvm \<br>        -nographic \<br>        -pidfile vm.pid \<br>        2&gt;&amp;1 | tee vm.log<br><br></code></pre></div></td></tr></table></figure><p>输入root后成功进入</p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030471.png" alt="image-20211127143311829"></p></li><li><p>测试ssh</p><p>因为后面syzkaller会用到ssh连接，所以需要测试一下</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">ssh -i /home/zino/syz/image/stretch.id_rsa -p 10021 -o &quot;StrictHostKeyChecking no&quot; root@localhost<br></code></pre></div></td></tr></table></figure><p>成功在另一个终端创建连接</p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030472.png" alt="image-20211127143344050"></p><p>之后用poweroff关闭虚拟机</p><p>开始安装syzkaller</p><h3 id="安装syzkaller"><a class="markdownIt-Anchor" href="#安装syzkaller"></a> 安装syzkaller</h3><ul><li><p>go环境配置</p><p><code>syzkaller</code>是用go语言写的，所以需要首先配置go环境，安装go的安装包来配置</p>  <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">wget https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz<br>tar -xf go1.14.2.linux-amd64.tar.gz<br>mv go goroot<br>mkdir gopath<br>export GOPATH=`pwd`/gopath<br>export GOROOT=`pwd`/goroot<br>export PATH=$GOPATH/bin:$PATH<br>export PATH=$GOROOT/bin:$PATH<br></code></pre></div></td></tr></table></figure></li><li><p>下载<code>syzkaller</code></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">go get -u -d github.com/google/syzkaller/prog #有点慢，直接git clone<br>#下面的路径可以自己建立，也可以不建，这样就自己指定路径，记得后面用这个路径就行<br>git clone https://github.com/google/syzkaller.git<br>cd gopath/src/github.com/google/syzkaller/<br>make<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>make后出现错误</strong></p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030473.jpg" alt="make错误"></p><p>搜索了之后发现这是由于make是内存不够导致的，所以学习了一下如何创建交换分区来缓解内存压力</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">&gt;#创建用于交换分区的文件<br>&gt;dd if=/dev/zero of=/swapfile bs=1M count=2048<br>&gt;#设置交换分区文件<br>&gt;mkswap /swapfile<br>&gt;#立即启用交换分区文件<br>&gt;swapon /swapfile<br>&gt;#打开/etc/fstab<br>&gt;sudo vim /etc/fstab<br>&gt;#在下面添加下面一行，使其永久有效<br>&gt;/swapfile swap swap defaults 0 0<br></code></pre></div></td></tr></table></figure><p>之后再次make就成功了</p><p>参考链接：<a href="https://blog.csdn.net/zhangxiaoyang0/article/details/82501209">Linux上创建SWAP文件/分区</a></p></blockquote><p>可以看到/syzkaller/bin下出现下列文件</p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030474.png" alt="image-20211127230030934"></p></li><li><p>运行syzkaller manager</p><p>首先需要自己建立一个配置文件my.cfg，作为syzkaller的配置文件</p><p>我的配置路径如下：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;linux/amd64&quot;</span>,<br><span class="hljs-attr">&quot;http&quot;</span>: <span class="hljs-string">&quot;127.0.0.1:56741&quot;</span>,<br><span class="hljs-attr">&quot;workdir&quot;</span>: <span class="hljs-string">&quot;/home/zino/syz/gopath/src/github.com/google/syzkaller/workdir&quot;</span>,<br><span class="hljs-attr">&quot;kernel_obj&quot;</span>: <span class="hljs-string">&quot;/home/zino/syz/linux-5.14&quot;</span>,<br><span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-string">&quot;/home/zino/syz/image/stretch.img&quot;</span>,<br><span class="hljs-attr">&quot;sshkey&quot;</span>: <span class="hljs-string">&quot;/home/zino/syz/image/stretch.id_rsa&quot;</span>,<br><span class="hljs-attr">&quot;syzkaller&quot;</span>: <span class="hljs-string">&quot;/home/zino/syz/gopath/src/github.com/google/syzkaller&quot;</span>,<br><span class="hljs-attr">&quot;procs&quot;</span>: <span class="hljs-number">8</span>,<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;qemu&quot;</span>,<br><span class="hljs-attr">&quot;vm&quot;</span>: &#123;<br><span class="hljs-attr">&quot;count&quot;</span>: <span class="hljs-number">4</span>,<br><span class="hljs-attr">&quot;kernel&quot;</span>: <span class="hljs-string">&quot;/home/zino/syz/linux-5.14/arch/x86/boot/bzImage&quot;</span>,<br><span class="hljs-attr">&quot;cpu&quot;</span>: <span class="hljs-number">2</span>,<br><span class="hljs-attr">&quot;mem&quot;</span>: <span class="hljs-number">2048</span>,<br>#<span class="hljs-attr">&quot;qemu_args&quot;</span>: <span class="hljs-string">&quot;-enable-kvm&quot;</span><br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>然后还需要创建一个syzkaller的工作区，用来存放crash信息等</p><p>然后就可以直接开始运行syzkaller了</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">mkdir workdir<br>./bin/syz-manager -config=my.cfg<br></code></pre></div></td></tr></table></figure><blockquote><p>but果然最后一步还是没有那么顺利</p><p>报错如下</p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030475.jpg" alt="QQ图片20211127230728"></p><p>努力了很久，找到了一个解决方法（原因有待思考）：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs terminal">sudo vim /etc/default/grub<br>#将最后一行修改成<br>GRUB_CMDLINE_LINUX=&quot;console=ttyS0 console=ttyS0,115200n81 no_timer_check  crashkernel=auto rhgb quiet kvm.ignore_msrs=1&quot;<br>#更新配置<br>grub-mkconfig -o &quot;$(readlink -e /etc/grub2.conf)&quot;<br>#使配置生效<br>echo 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs<br></code></pre></div></td></tr></table></figure><p>这时候再去执行<code>./bin/syz-manager -config=my.cfg</code>就可以成功了</p><p>博客上说是重启生效，但是不重启有效，重启后就又不行了，所以感觉还是有点问题</p><p>参考链接：<a href="https://cloudnull.io/2020/07/fixing-msrs-errors-in-nested-virt/">Fixing MSR 0xe1 to 0x0</a></p><p>后来在官方的troubleshooting里找到了解决方法</p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030476.png" alt="问题解决方法"></p><p>在官方给的配置文件的最后一行加上</p><p><code>&quot;qemu_args&quot;: &quot;-enable-kvm&quot;</code></p><p>即把上方的配置文件的最后一行注释取消</p></blockquote></li></ul><p>再次执行<code>./bin/syz-manager -config=my.cfg</code></p><p>成功！</p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030477.png" alt="image-20211127185108620"></p><p>web端也成功显示</p><p><img src="https://zino-obsidian-imgbed.oss-cn-shanghai.aliyuncs.com/obsidian_image/202310101030478.png" alt="image-20211127185004493"></p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
      <tag>syzkaller</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
